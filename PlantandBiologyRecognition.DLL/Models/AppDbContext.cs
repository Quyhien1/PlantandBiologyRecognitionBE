// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace PlantandBiologyRecognition.DAL.Models;

public partial class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Educationmaterial> Educationmaterials { get; set; }

    public virtual DbSet<History> Histories { get; set; }

    public virtual DbSet<Speciman> Specimen { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasPostgresEnum("auth", "aal_level", new[] { "aal1", "aal2", "aal3" })
            .HasPostgresEnum("auth", "code_challenge_method", new[] { "s256", "plain" })
            .HasPostgresEnum("auth", "factor_status", new[] { "unverified", "verified" })
            .HasPostgresEnum("auth", "factor_type", new[] { "totp", "webauthn", "phone" })
            .HasPostgresEnum("auth", "one_time_token_type", new[] { "confirmation_token", "reauthentication_token", "recovery_token", "email_change_token_new", "email_change_token_current", "phone_change_token" })
            .HasPostgresEnum("realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" })
            .HasPostgresEnum("realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" })
            .HasPostgresExtension("extensions", "pg_stat_statements")
            .HasPostgresExtension("extensions", "pgcrypto")
            .HasPostgresExtension("extensions", "uuid-ossp")
            .HasPostgresExtension("graphql", "pg_graphql")
            .HasPostgresExtension("vault", "supabase_vault");

        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.Accountid).HasName("account_pkey");

            entity.ToTable("account", "plantandbiologyrecognition");

            entity.Property(e => e.Accountid)
                .ValueGeneratedNever()
                .HasColumnName("accountid");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.Isactive)
                .HasDefaultValue(true)
                .HasColumnName("isactive");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.Roleid)
                .HasMaxLength(100)
                .HasColumnName("roleid");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("username");
        });

        modelBuilder.Entity<Educationmaterial>(entity =>
        {
            entity.HasKey(e => e.Materialid).HasName("educationmaterial_pkey");

            entity.ToTable("educationmaterial", "plantandbiologyrecognition");

            entity.Property(e => e.Materialid)
                .ValueGeneratedNever()
                .HasColumnName("materialid");
            entity.Property(e => e.Createby).HasColumnName("createby");
            entity.Property(e => e.Createdat)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("createdat");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Filepath)
                .HasMaxLength(500)
                .HasColumnName("filepath");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.Updateat)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updateat");

            entity.HasOne(d => d.CreatebyNavigation).WithMany(p => p.Educationmaterials)
                .HasForeignKey(d => d.Createby)
                .HasConstraintName("educationmaterial_createby_fkey");
        });

        modelBuilder.Entity<History>(entity =>
        {
            entity.HasKey(e => e.Sessionid).HasName("history_pkey");

            entity.ToTable("history", "plantandbiologyrecognition");

            entity.Property(e => e.Sessionid)
                .ValueGeneratedNever()
                .HasColumnName("sessionid");
            entity.Property(e => e.Aimodel)
                .HasMaxLength(255)
                .HasColumnName("aimodel");
            entity.Property(e => e.Answer).HasColumnName("answer");
            entity.Property(e => e.Createdat)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("createdat");
            entity.Property(e => e.Imageuri)
                .HasMaxLength(500)
                .HasColumnName("imageuri");
            entity.Property(e => e.Specimen).HasColumnName("specimen");
            entity.Property(e => e.Userid).HasColumnName("userid");

            entity.HasOne(d => d.SpecimenNavigation).WithMany(p => p.Histories)
                .HasForeignKey(d => d.Specimen)
                .HasConstraintName("history_specimen_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Histories)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("history_userid_fkey");
        });

        modelBuilder.Entity<Speciman>(entity =>
        {
            entity.HasKey(e => e.Specimenid).HasName("specimen_pkey");

            entity.ToTable("specimen", "plantandbiologyrecognition");

            entity.Property(e => e.Specimenid)
                .ValueGeneratedNever()
                .HasColumnName("specimenid");
            entity.Property(e => e.Commonname)
                .HasMaxLength(255)
                .HasColumnName("commonname");
            entity.Property(e => e.Createby).HasColumnName("createby");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Imageuri)
                .HasMaxLength(500)
                .HasColumnName("imageuri");
            entity.Property(e => e.Inmaterial).HasColumnName("inmaterial");
            entity.Property(e => e.Scientificname)
                .HasMaxLength(255)
                .HasColumnName("scientificname");

            entity.HasOne(d => d.CreatebyNavigation).WithMany(p => p.Specimen)
                .HasForeignKey(d => d.Createby)
                .HasConstraintName("specimen_createby_fkey");

            entity.HasOne(d => d.InmaterialNavigation).WithMany(p => p.Specimen)
                .HasForeignKey(d => d.Inmaterial)
                .HasConstraintName("specimen_inmaterial_fkey");
        });
        modelBuilder.HasSequence<int>("seq_schema_version", "graphql").IsCyclic();

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}