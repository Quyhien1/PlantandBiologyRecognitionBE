// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace PlantandBiologyRecognition.DAL.Models;

public partial class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Aitrainingjob> Aitrainingjobs { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<Learningtip> Learningtips { get; set; }

    public virtual DbSet<Recognitionhistory> Recognitionhistories { get; set; }

    public virtual DbSet<Sample> Samples { get; set; }

    public virtual DbSet<Sampledetail> Sampledetails { get; set; }

    public virtual DbSet<Sampleimage> Sampleimages { get; set; }

    public virtual DbSet<Savedsample> Savedsamples { get; set; }

    public virtual DbSet<Textbooklink> Textbooklinks { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Userrole> Userroles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasPostgresEnum("auth", "aal_level", new[] { "aal1", "aal2", "aal3" })
            .HasPostgresEnum("auth", "code_challenge_method", new[] { "s256", "plain" })
            .HasPostgresEnum("auth", "factor_status", new[] { "unverified", "verified" })
            .HasPostgresEnum("auth", "factor_type", new[] { "totp", "webauthn", "phone" })
            .HasPostgresEnum("auth", "one_time_token_type", new[] { "confirmation_token", "reauthentication_token", "recovery_token", "email_change_token_new", "email_change_token_current", "phone_change_token" })
            .HasPostgresEnum("realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" })
            .HasPostgresEnum("realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" })
            .HasPostgresExtension("extensions", "pg_stat_statements")
            .HasPostgresExtension("extensions", "pgcrypto")
            .HasPostgresExtension("extensions", "uuid-ossp")
            .HasPostgresExtension("graphql", "pg_graphql")
            .HasPostgresExtension("vault", "supabase_vault");

        modelBuilder.Entity<Aitrainingjob>(entity =>
        {
            entity.HasKey(e => e.JobId).HasName("aitrainingjobs_pkey");

            entity.ToTable("aitrainingjobs", "plantandbiologyrecognition");

            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.FinishedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("finished_at");
            entity.Property(e => e.ModelVersion)
                .HasMaxLength(50)
                .HasColumnName("model_version");
            entity.Property(e => e.StartedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("started_at");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("categories_pkey");

            entity.ToTable("categories", "plantandbiologyrecognition");

            entity.HasIndex(e => e.Name, "categories_name_key").IsUnique();

            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("feedbacks_pkey");

            entity.ToTable("feedbacks", "plantandbiologyrecognition");

            entity.Property(e => e.FeedbackId).HasColumnName("feedback_id");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasColumnName("message");
            entity.Property(e => e.SubmittedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("submitted_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.Feedbacks)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("feedbacks_user_id_fkey");
        });

        modelBuilder.Entity<Learningtip>(entity =>
        {
            entity.HasKey(e => e.TipId).HasName("learningtips_pkey");

            entity.ToTable("learningtips", "plantandbiologyrecognition");

            entity.Property(e => e.TipId).HasColumnName("tip_id");
            entity.Property(e => e.SampleId).HasColumnName("sample_id");
            entity.Property(e => e.TipText)
                .IsRequired()
                .HasColumnName("tip_text");

            entity.HasOne(d => d.Sample).WithMany(p => p.Learningtips)
                .HasForeignKey(d => d.SampleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("learningtips_sample_id_fkey");
        });

        modelBuilder.Entity<Recognitionhistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("recognitionhistory_pkey");

            entity.ToTable("recognitionhistory", "plantandbiologyrecognition");

            entity.Property(e => e.HistoryId).HasColumnName("history_id");
            entity.Property(e => e.ResultConfidence).HasColumnName("result_confidence");
            entity.Property(e => e.SampleId).HasColumnName("sample_id");
            entity.Property(e => e.UploadTime)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("upload_time");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Sample).WithMany(p => p.Recognitionhistories)
                .HasForeignKey(d => d.SampleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("recognitionhistory_sample_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Recognitionhistories)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("recognitionhistory_user_id_fkey");
        });

        modelBuilder.Entity<Sample>(entity =>
        {
            entity.HasKey(e => e.SampleId).HasName("samples_pkey");

            entity.ToTable("samples", "plantandbiologyrecognition");

            entity.Property(e => e.SampleId).HasColumnName("sample_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.ScientificName)
                .HasMaxLength(150)
                .HasColumnName("scientific_name");

            entity.HasOne(d => d.Category).WithMany(p => p.Samples)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("samples_category_id_fkey");
        });

        modelBuilder.Entity<Sampledetail>(entity =>
        {
            entity.HasKey(e => e.DetailId).HasName("sampledetails_pkey");

            entity.ToTable("sampledetails", "plantandbiologyrecognition");

            entity.Property(e => e.DetailId).HasColumnName("detail_id");
            entity.Property(e => e.Behavior).HasColumnName("behavior");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Habitat).HasColumnName("habitat");
            entity.Property(e => e.OtherInfo).HasColumnName("other_info");
            entity.Property(e => e.SampleId).HasColumnName("sample_id");

            entity.HasOne(d => d.Sample).WithMany(p => p.Sampledetails)
                .HasForeignKey(d => d.SampleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sampledetails_sample_id_fkey");
        });

        modelBuilder.Entity<Sampleimage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("sampleimages_pkey");

            entity.ToTable("sampleimages", "plantandbiologyrecognition");

            entity.Property(e => e.ImageId).HasColumnName("image_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasColumnName("image_url");
            entity.Property(e => e.SampleId).HasColumnName("sample_id");

            entity.HasOne(d => d.Sample).WithMany(p => p.Sampleimages)
                .HasForeignKey(d => d.SampleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("sampleimages_sample_id_fkey");
        });

        modelBuilder.Entity<Savedsample>(entity =>
        {
            entity.HasKey(e => e.SavedId).HasName("savedsamples_pkey");

            entity.ToTable("savedsamples", "plantandbiologyrecognition");

            entity.Property(e => e.SavedId).HasColumnName("saved_id");
            entity.Property(e => e.SampleId).HasColumnName("sample_id");
            entity.Property(e => e.SavedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("saved_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Sample).WithMany(p => p.Savedsamples)
                .HasForeignKey(d => d.SampleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("savedsamples_sample_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.Savedsamples)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("savedsamples_user_id_fkey");
        });

        modelBuilder.Entity<Textbooklink>(entity =>
        {
            entity.HasKey(e => e.LinkId).HasName("textbooklinks_pkey");

            entity.ToTable("textbooklinks", "plantandbiologyrecognition");

            entity.Property(e => e.LinkId).HasColumnName("link_id");
            entity.Property(e => e.ContentSummary).HasColumnName("content_summary");
            entity.Property(e => e.PageNumber).HasColumnName("page_number");
            entity.Property(e => e.SampleId).HasColumnName("sample_id");
            entity.Property(e => e.TextbookName)
                .HasMaxLength(150)
                .HasColumnName("textbook_name");

            entity.HasOne(d => d.Sample).WithMany(p => p.Textbooklinks)
                .HasForeignKey(d => d.SampleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("textbooklinks_sample_id_fkey");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("users_pkey");

            entity.ToTable("users", "plantandbiologyrecognition");

            entity.HasIndex(e => e.Email, "users_email_key").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Avatar)
                .HasColumnType("character varying")
                .HasColumnName("avatar");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.IsActive).HasColumnName("Is_Active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasColumnName("password_hash");
        });

        modelBuilder.Entity<Userrole>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("userroles_pkey");

            entity.ToTable("userroles", "plantandbiologyrecognition");

            entity.HasIndex(e => e.RoleName, "userroles_role_name_key").IsUnique();

            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("role_name");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.Userroles)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("userroles_user_id_fkey");
        });
        modelBuilder.HasSequence<int>("seq_schema_version", "graphql").IsCyclic();

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}